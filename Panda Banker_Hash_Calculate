def ROL(data, shift, size=32):
    shift %= size
    remains = data >> (size - shift)
    body = (data << shift) - (remains << size )
    return (body + remains)
     
 
def ROR(data, shift, size=32):
    shift %= size
    body = data >> shift
    remains = (data << (size - shift)) - (body << size)
    return (body + remains)

Hash = 0
modulename = "kernel32.dll"
for mychar in modulename:
    print (hex(ord(mychar)))
    Newchar = ord(mychar)
    print (hex(Newchar))
    if (Newchar - 97) < 0:
        if (Newchar - 97 + 256) < 25:
            Newchar = (Newchar + 224)&0xff
    else:
        if (Newchar - 97) < 25:
            Newchar = (Newchar + 224)&0xff            
    print ("Hex: " + hex(Newchar))
    Hash = ROR(Hash, 13, 32) + Newchar
    print ("Hash: " + hex(Hash))
print("Result: " + hex(Hash^0x0508ADF0))
